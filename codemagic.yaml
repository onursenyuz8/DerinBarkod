workflows:
  android_debug:
    name: Android Debug (otonom + stabil)
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true

    environment:
      flutter: stable
      java: 17
      vars:
        # Paket adını istersen Codemagic env'de APPLICATION_ID ile geç
        APPLICATION_ID: com.derinwifi.barkod

    cache:
      cache_paths:
        - $HOME/.pub-cache
        - android/.gradle
        - .gradle

    scripts:
      # 0) Proje kökünü (pubspec.yaml olan klasörü) bul
      - name: App dizinini bul (pubspec.yaml)
        script: |
          set -e
          APP_DIR=$(dirname "$(find . -maxdepth 5 -name pubspec.yaml | head -n1)")
          if [ -z "$APP_DIR" ]; then
            echo "pubspec.yaml bulunamadı. Repo kökünü kontrol et."
            ls -la
            exit 1
          fi
          echo "Bulunan APP_DIR: $APP_DIR"
          echo "APP_DIR=$APP_DIR" >> $CM_ENV

      # 1) Android SDK 34 ve Build-Tools
      - name: Android SDK 34 + Build-Tools kur
        script: |
          set -e
          export ANDROID_HOME=${ANDROID_SDK_ROOT:-/opt/android-sdk}
          yes | sdkmanager --licenses || true
          sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools" || true
          sdkmanager --list | head -n 50 || true

      # 2) Android klasörü & gradlew
      - name: Android klasörü ve gradlew kontrol
        script: |
          cd "$APP_DIR"
          if [ ! -d android ]; then
            echo "android/ yok; oluşturuluyor..."
            flutter create --platforms=android .
          fi
          chmod +x android/gradlew || true
          echo "=== android dizinleri ==="
          ls -la android || true
          ls -la android/app || true

      # 3) local.properties yaz
      - name: local.properties yaz (flutter.sdk & sdk.dir)
        script: |
          cd "$APP_DIR"
          export ANDROID_HOME=${ANDROID_SDK_ROOT:-/opt/android-sdk}
          FLUTTER_ROOT="${FLUTTER_ROOT:-$(dirname $(dirname $(which flutter)))}"
          mkdir -p android
          {
            echo "flutter.sdk=$FLUTTER_ROOT"
            echo "sdk.dir=$ANDROID_HOME"
          } > android/local.properties
          echo "=== local.properties ==="
          cat android/local.properties

      # 4) Gradle/AGP/Kotlin pin (Flutter plugin SDK'dan include)
      - name: Gradle/AGP/Kotlin/SDK pin
        script: |
          set -e
          cd "$APP_DIR/android"
          APP_ID="${APPLICATION_ID:-com.derinwifi.barkod}"

          # Gradle wrapper -> 8.7
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties <<'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-all.zip
          EOF

          # settings.gradle — plugin loader YOK; SDK'dan includeBuild
          cat > settings.gradle <<'EOF'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          def localProperties = new Properties()
          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader("UTF-8") { reader -> localProperties.load(reader) }
          }
          def flutterSdkPath = localProperties.getProperty("flutter.sdk")
          if (flutterSdkPath == null) { flutterSdkPath = System.getenv("FLUTTER_ROOT") }
          if (flutterSdkPath == null) { throw new GradleException("Flutter SDK not found. Set flutter.sdk in android/local.properties") }

          includeBuild("${flutterSdkPath}/packages/flutter_tools/gradle")

          plugins {
              id "com.android.application" version "8.6.0" apply false
              id "org.jetbrains.kotlin.android" version "1.9.24" apply false
          }

          include(":app")
          EOF

          # top-level build.gradle
          cat > build.gradle <<'EOF'
          buildscript {
              repositories { google(); mavenCentral() }
              dependencies { classpath "com.android.tools.build:gradle:8.6.0" }
          }
          allprojects {
              repositories { google(); mavenCentral() }
          }
          EOF

          # app/build.gradle
          cat > app/build.gradle <<EOF
          plugins {
              id "com.android.application"
              id "org.jetbrains.kotlin.android"
              id "dev.flutter.flutter-gradle-plugin"   // SDK'dan includeBuild ile geliyor
          }
          android {
              namespace "${APP_ID}"
              compileSdkVersion 34
              defaultConfig {
                  applicationId "${APP_ID}"
                  minSdkVersion 23
                  targetSdkVersion 34
                  versionCode 1
                  versionName "1.0"
                  multiDexEnabled true
              }
              buildTypes {
                  release { minifyEnabled false; shrinkResources false }
                  debug { minifyEnabled false }
              }
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }
              kotlinOptions { jvmTarget = "17" }
              packagingOptions {
                  resources { excludes += ["/META-INF/{AL2.0,LGPL2.1}", "META-INF/DEPENDENCIES"] }
              }
          }
          dependencies {
              implementation "androidx.multidex:multidex:2.0.1"
          }
          // Gerekirse sürüm sabitleme örneği:
          // configurations.all {
          //   resolutionStrategy {
          //     force 'com.google.android.gms:play-services-basement:18.3.0'
          //     force 'androidx.core:core-ktx:1.10.1'
          //   }
          // }
          EOF

          # Manifest (package="" YOK)
          mkdir -p app/src/main
          cat > app/src/main/AndroidManifest.xml <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <application
                  android:name="${applicationName}"
                  android:label="DerinBarkod"
                  android:icon="@mipmap/ic_launcher"
                  android:usesCleartextTraffic="true">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:theme="@style/LaunchTheme"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
                      android:hardwareAccelerated="true"
                      android:windowSoftInputMode="adjustResize">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

      # 5) Pub get
      - name: Bağımlılıkları al
        script: |
          cd "$APP_DIR"
          flutter pub get

      # 6) Derle (Flutter + Gradle fallback)
      - name: Debug APK derle (stacktrace; gradle fallback)
        script: |
          set -o pipefail
          cd "$APP_DIR"
          flutter clean
          if ! flutter build apk --debug -v | tee build_log.txt; then
            echo "Flutter build düştü, gradle assembleDebug deneniyor..."
            (cd android && ./gradlew --version || true)
            (cd android && ./gradlew tasks --all --no-daemon --stacktrace --info || true)
            (cd android && ./gradlew assembleDebug --no-daemon --stacktrace --info --debug) | tee -a build_log.txt
          fi

      # 7) APK'yi topla
      - name: Çıktıları listele ve APK'yi topla
        script: |
          cd "$APP_DIR"
          echo "=== build/app/outputs ==="; ls -R build/app/outputs || true
          echo "=== android/app/build/outputs ==="; ls -R android/app/build/outputs || true
          mkdir -p artifacts
          cp -f build/app/outputs/flutter-apk/*.apk artifacts/ 2>/dev/null || true
          cp -f android/app/build/outputs/apk/**/*.apk artifacts/ 2>/dev/null || true
          cp -f android/app/build/outputs/apk/*.apk artifacts/ 2>/dev/null || true
          find build -type f -name "*.apk" -maxdepth 6 -print -exec cp -f {} artifacts/ \; || true
          echo "Artifacts içeriği:"; ls -lh artifacts || true

      # 8) Hata özeti (varsa)
      - name: Hata özeti (varsa)
        script: |
          cd "$APP_DIR"
          echo "===== FAILURE BLOĞU (varsa) =====" > failure_extract.txt
          awk '/FAILURE: Build failed with an exception./{flag=1} flag{print} /BUILD FAILED/{flag=0}' build_log.txt | tail -n 200 >> failure_extract.txt || true
          echo "================================="
          if [ -z "$(ls -A artifacts/*.apk 2>/dev/null)" ]; then
            echo "APK bulunamadı (muhtemelen build düştü)."
            echo "---- Hata özeti ----"
            tail -n 120 failure_extract.txt || true
            exit 1
          fi

    artifacts:
      - $APP_DIR/artifacts/*.apk
      - $APP_DIR/build_log.txt
      - $APP_DIR/failure_extract.txt
      - $APP_DIR/android/**/*
